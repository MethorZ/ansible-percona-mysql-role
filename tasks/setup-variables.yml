---
#
# Default OS specific variable definitions / defaults
#
- block:
  - name: INCLUDE_VARS | OS specific vars
    include_vars: "{{ ansible_facts['os_family'] }}.yml"

  - name: FACTS - Define MySQL server 8 package
    set_fact:
      percona_mysql_packages: "{{ __percona_mysql8_packages | list }}"
    when: percona_mysql_packages is not defined and percona_mysql_version == 8

  - name: FACTS - Prepare command to enable percona server 8 repository
    set_fact:
      percona_enable_repository: "{{ __percona_mysql8_enable_repository }}"
    when: percona_enable_repository is not defined and percona_mysql_version == 8

  - name: FACTS - Define Percona MySQL 5 server package
    set_fact:
      percona_mysql_packages: "{{ __percona_mysql_packages | list }}"
    when: percona_mysql_packages is not defined

  - name: FACTS - Define Percona Toolkit package
    set_fact:
      percona_mysql_toolkit_package: "{{ __percona_mysql_toolkit_package }}"
    when: percona_mysql_toolkit_package is not defined

  - name: FACTS - Define Percona MySQL service / daemon
    set_fact:
      percona_mysql_service: "{{ __percona_mysql_service }}"
    when: percona_mysql_service is not defined

  - name: FACTS - Define Percona MySQL systemd service
    set_fact:
      percona_mysql_systemd_service: "{{ __percona_mysql_systemd_service }}"
    when: percona_mysql_systemd_service is not defined

  - name: FACTS - Define keyserver for Percona MySQL
    set_fact:
      percona_mysql_keyserver: "{{ __percona_mysql_keyserver }}"
    when: percona_mysql_keyserver is not defined

  - name: FACTS - Define key id for Percona MySQL
    set_fact:
      percona_mysql_key_id: "{{ __percona_mysql_key_id }}"
    when: percona_mysql_key_id is not defined

  - name: FACTS - Define repository for Percona MySQL
    set_fact:
      percona_mysql_repository: "{{ __percona_mysql_repository }}"
    when: percona_mysql_repository is not defined

  - name: FACTS - Define repository for Percona MySQL 8
    set_fact:
      percona_mysql8_repository: "{{ __percona_mysql8_repository }}"
    when: percona_mysql8_repository is not defined

  - name: FACTS - Define Percona MySQL 8 main conf file
    set_fact:
      percona_mysql_config: "{{ __percona_mysql8_config }}"
    when: percona_mysql_config is not defined and percona_mysql_version == 8

  - name: FACTS - Define Percona MySQL 5 main conf file
    set_fact:
      percona_mysql_config: "{{ __percona_mysql_config }}"
    when: percona_mysql_config is not defined

  - name: FACTS - Define jemalloc package (for buster)
    set_fact:
      percona_mysql_jemalloc_package: "{{ __percona_mysql_jemalloc2_package }}"
      percona_mysql_jemalloc_path: "{{ __percona_mysql_jemalloc2_path }}"
    when: percona_mysql_jemalloc_package is not defined and (ansible_facts['distribution_release'] == 'buster' or ansible_facts['distribution_release'] == 'bullseye')

  - name: FACTS - Define jemalloc package (for older than buster)
    set_fact:
      percona_mysql_jemalloc_package: "{{ __percona_mysql_jemalloc1_package }}"
      percona_mysql_jemalloc_path: "{{ __percona_mysql_jemalloc1_path }}"
    when: percona_mysql_jemalloc_package is not defined

  - name: FACTS - Define defaults sysconfig path
    set_fact:
      percona_mysql_jemalloc_sysconfig: "{{ __percona_mysql_jemalloc_sysconfig }}"
    when: percona_mysql_jemalloc_sysconfig is not defined

  - name: FACTS - Define default user for root my.cnf
    set_fact:
      percona_mysql_read_only_user: root
    when: percona_mysql_read_only_user is not defined or percona_mysql_read_only_user == ''

  - name: FACTS - Define mysql binlog file path
    set_fact:
      percona_mysql_log_bin: "{{ percona_mysql_binary_log_dir }}/{{ percona_mysql_binary_log_file }}"
    when: percona_mysql_log_bin is not defined

  - name: BLOCK | Attempt to discover existing root password
    block:

    - name: STAT | Check existence of root my.cnf
      stat:
        path: "{{ percona_mysql_root_my_cnf_file }}"
      register: percona_mysql_existing_my_cnf_file

    - name: SET_FACTS | Define existence of my.cnf file
      set_fact:
        percona_mysql_root_my_cnf_exists: "{{ percona_mysql_existing_my_cnf_file.stat.exists }}"

    - name: FETCH | Fetch remote root my.cnf
      fetch:
        src: "{{ percona_mysql_existing_my_cnf_file.stat.path }}"
        dest: "{{ percona_mysql_local_temp_dir }}/ansible_fetched_my.cnf.{{ inventory_hostname }}"
        flat: yes
      when: percona_mysql_existing_my_cnf_file.stat.exists

    - name: SET_FACTS | Read generated password file for root my.cnf template
      set_fact:
        percona_mysql_root_existing_password: "{{ lookup('ini', 'password section=client file=' + percona_mysql_local_temp_dir +'/ansible_fetched_my.cnf.' + inventory_hostname) }}"
      when: percona_mysql_existing_my_cnf_file.stat.exists

    - name: FILE | Remove fetched file after use
      file:
        path: "{{ percona_mysql_local_temp_dir }}/ansible_fetched_my.cnf.{{ inventory_hostname }}"
        state: absent
  when: percona_mysql_enabled
